{"filter":false,"title":"main.py","tooltip":"/market_maker/market_maker/main.py","undoManager":{"mark":88,"position":88,"stack":[[{"start":{"row":344,"column":34},"end":{"row":344,"column":35},"action":"remove","lines":["n"],"id":2},{"start":{"row":344,"column":33},"end":{"row":344,"column":34},"action":"remove","lines":["o"]},{"start":{"row":344,"column":32},"end":{"row":344,"column":33},"action":"remove","lines":["g"]},{"start":{"row":344,"column":31},"end":{"row":344,"column":32},"action":"remove","lines":["i"]},{"start":{"row":344,"column":30},"end":{"row":344,"column":31},"action":"remove","lines":["a"]},{"start":{"row":344,"column":29},"end":{"row":344,"column":30},"action":"remove","lines":["S"]}],[{"start":{"row":344,"column":29},"end":{"row":344,"column":30},"action":"insert","lines":["T"],"id":3},{"start":{"row":344,"column":30},"end":{"row":344,"column":31},"action":"insert","lines":["o"]},{"start":{"row":344,"column":31},"end":{"row":344,"column":32},"action":"insert","lines":["k"]},{"start":{"row":344,"column":32},"end":{"row":344,"column":33},"action":"insert","lines":["y"]},{"start":{"row":344,"column":33},"end":{"row":344,"column":34},"action":"insert","lines":["o"]}],[{"start":{"row":346,"column":32},"end":{"row":346,"column":33},"action":"insert","lines":[" "],"id":4},{"start":{"row":346,"column":33},"end":{"row":346,"column":34},"action":"insert","lines":["#"]}],[{"start":{"row":346,"column":34},"end":{"row":346,"column":35},"action":"insert","lines":[" "],"id":5}],[{"start":{"row":346,"column":35},"end":{"row":346,"column":63},"action":"insert","lines":["Market_maker('ETHUSD').run()"],"id":6}],[{"start":{"row":346,"column":23},"end":{"row":346,"column":24},"action":"remove","lines":["D"],"id":7},{"start":{"row":346,"column":22},"end":{"row":346,"column":23},"action":"remove","lines":["S"]},{"start":{"row":346,"column":21},"end":{"row":346,"column":22},"action":"remove","lines":["U"]},{"start":{"row":346,"column":20},"end":{"row":346,"column":21},"action":"remove","lines":["H"]},{"start":{"row":346,"column":19},"end":{"row":346,"column":20},"action":"remove","lines":["T"]},{"start":{"row":346,"column":18},"end":{"row":346,"column":19},"action":"remove","lines":["E"]}],[{"start":{"row":346,"column":18},"end":{"row":346,"column":19},"action":"insert","lines":["X"],"id":8},{"start":{"row":346,"column":19},"end":{"row":346,"column":20},"action":"insert","lines":["B"]},{"start":{"row":346,"column":20},"end":{"row":346,"column":21},"action":"insert","lines":["T"]}],[{"start":{"row":346,"column":18},"end":{"row":346,"column":21},"action":"remove","lines":["XBT"],"id":9},{"start":{"row":346,"column":18},"end":{"row":346,"column":24},"action":"insert","lines":["XBTUSD"]}],[{"start":{"row":0,"column":0},"end":{"row":346,"column":63},"action":"remove","lines":["from bitmex_websocket import BitMEXWebsocket","import logging","from time import sleep","import threading","import numpy as np","from decimal import *","import bitmex","import simplejson as json","import pandas as pd ","import ccxt","import datetime","import time","import os","import sys","","VAR = 0.02**2","GAMMA = 15","K = 30","D = 0.99","THETA = 25","ETA = 0.004","ETA2 = 0.0006","MAX_POS = 150","","logging.basicConfig(filename=\"marketmakertest1011.log\", level=logging.INFO, format=\"%(asctime)s:%(levelname)s:%(message)s\")","","# Basic use of websocket.","class Market_maker():","    def __init__(self, symbol):","        self.ctr = 0","        self.symbol = symbol","        #self.logger = self.setup_logger()","","        # hoang: wbFfEOkZqut7OG8rueCPTmEsCsYHyqxakxlg1dNoZbz7EJ6w","        # hoang: ZJ7ZG0bDrem884wQkNnvv2PB","","        api_key = \"ZJ7ZG0bDrem884wQkNnvv2PB\" #\"9FR7reF9F71NDZG_BDoMsfm9\" # 8vXVw923QlDRoRtXSwvwbXlU","        api_secret = \"wbFfEOkZqut7OG8rueCPTmEsCsYHyqxakxlg1dNoZbz7EJ6w\" #\"TiXEEabXxJ_KX5ev_RoOnB-JVQqDdj4AAMJvRBXpPhtAKGVH\" # nFZS4qiArohuyY_4J9oGBk49X2iL5LteAXCrHcHveF6j5Gwi","","        # Instantiating the WS will make it connect. Be sure to add your api_key/api_secret.","        self.ws = BitMEXWebsocket(endpoint=\"https://www.bitmex.com/api/v1\", symbol=self.symbol,","                             api_key=api_key, api_secret=api_secret)","        self.ws.get_instrument()","","        #self.logger.info(\"Instrument data: %s\" % self.ws.get_instrument())","        self.client = bitmex.bitmex(test=False, api_key=api_key, api_secret=api_secret)","        self.last_r = None","        self.last_spread = None","        #self.clean = False","","        self.tick = []","        self.cur_volatility = None","        self.act_volatility = None","        self.streak = 0","        self.prev_len = 0","        self.cur_len = 0","        self.idle = 0","        self.first = True","        self.sleep_ctr = 0","        self.general_ctr = 0","","        exchange = ccxt.bitmex()","        date_N_days_ago = (datetime.datetime.now() - datetime.timedelta(hours=2)).strftime(\"%Y-%m-%d %H:%M:%S\")","        since = time.mktime(datetime.datetime.strptime(date_N_days_ago, \"%Y-%m-%d %H:%M:%S\").timetuple())*1000","        df = exchange.fetch_ohlcv('ETH/USD', timeframe = '1m', since=since, limit=500)","        df = pd.DataFrame(df)","        df.columns = [\"Timestamp\", \"Open\", \"High\", \"Low\", \"tick\", \"Volume\"]","","        self.df = pd.DataFrame({'tick': df.tick.values.tolist()})","        #print (df.tail())","        #print (self.df.tail())","","        # always fetch df using ccxt","        # check number of pos: if len(pos) > 0 : self.first = False","        logging.info(\"App Initiated!\")","","    def restart(self):","        # api_key = \"ZJ7ZG0bDrem884wQkNnvv2PB\" #\"9FR7reF9F71NDZG_BDoMsfm9\" # 8vXVw923QlDRoRtXSwvwbXlU","        # api_secret = \"wbFfEOkZqut7OG8rueCPTmEsCsYHyqxakxlg1dNoZbz7EJ6w\" #\"TiXEEabXxJ_KX5ev_RoOnB-JVQqDdj4AAMJvRBXpPhtAKGVH\" # nFZS4qiArohuyY_4J9oGBk49X2iL5LteAXCrHcHveF6j5Gwi","","        # # Instantiating the WS will make it connect. Be sure to add your api_key/api_secret.","        # self.ws = BitMEXWebsocket(endpoint=\"https://www.bitmex.com/api/v1\", symbol=self.symbol,","        #                      api_key=api_key, api_secret=api_secret)","        # self.ws.get_instrument()","        # self.client = bitmex.bitmex(test=False, api_key=api_key, api_secret=api_secret)","        print ('Restart finished.')","        logging.info(\"Restarting the market maker...\")","        self.clean()","        os.execv(sys.executable, [sys.executable] + sys.argv)","","    def round_to(self, n, precision):","        correction = 0.5 if n >= 0 else -0.5","        return int( n/precision+correction ) * precision","","    def round_to_05(self, n):","        return self.round_to(n, 0.05)","","    def test(self):","        print ('Restarting')","        logging.info('Restarting')","        return self.restart()","","    def run(self):","        threading.Timer(15.0, self.run).start()","        sys.stdout.write(\"---------------------\\n\")","        logging.info(\"---------------------\\n\")","        #sys.stdout.flush()","            # TODO 1: write check_file_change & add settings.","","            #self.check_file_change()","            #sleep(settings.LOOP_INTERVAL)","","            # This will restart on very short downtime, but if it's longer,","            # the MM will crash entirely as it is unable to connect to the WS on boot.","        if not self.check_connection():","            print ('No connection detected! Restarting...')","            logging.error(\"Realtime data connection unexpectedly closed, restarting.\")","            self.restart()","","            # TODO 2: sanity_check, print_status    ","        self.ctr += 1","        self.general_ctr += 1","        ticker = self.ws.get_ticker()","        self.test = False","","        print ('Mid: ', ticker['mid'])","        #logging.info('New Ticker: ', ticker['mid'])","","        start_cond = (self.ctr == 1 and len(self.df) > 60)","","        if self.ctr == 4:","            print ('FULL MINUTE')","            logging.info('FULL MINUTE')","            self.ctr = 0","            #print (\"Df length: \", len(self.df))","            #print(self.df)","            self.df = self.df.append(pd.DataFrame({'tick': [ticker['mid']]}), ignore_index = True)","            if len(self.df) > 60:","                # self.write = True","                self.df = self.df.iloc[-80:]","                self.df['ret'] = (self.df['tick'] - self.df['tick'].shift())**2","                self.df['vola'] = self.df['ret'].rolling(60).apply(np.mean)","                self.cur_volatility = self.df.iloc[-1].vola","                print (\"Volatility: \", self.cur_volatility)","                logging.info('Full minute -- Volatility: {}'.format(self.cur_volatility))","            if self.first:","                print (self.df.tail(5))","                print (self.df.iloc[-1], self.df.iloc[-1].tick, self.df.iloc[-2], self.df.iloc[-2].tick)","        try:","            pos = self.client.Position.Position_get().result()[0][-1]['currentQty']","        except:","            pos = 0","","        try:","            ord_list = self.client.Order.Order_getOrders(filter=json.dumps({\"open\": True})).result()[0]","            #print(ord_list)","            #print (len(ord_list))","        except Exception as e:","            ord_list = []","            logging.info('Error when getting OrderList: {}'.format(e))","","        if self.test:","            print ('TEST! RESTART TRIGGERING')","            logging.info('TEST! RESTART TRIGGERING')","            self.restart()","","        if self.first == True and pos != 0:","            self.first = False","        if self.first == True and len(ord_list) != 0:","            self.first = False","","        if (self.df.iloc[-1].tick == self.df.iloc[-2].tick) and (self.df.iloc[-3].tick == self.df.iloc[-2].tick):","            print ('Repetition! RESTART TRIGGERING')","            logging.info('Repetition! RESTART TRIGGERING')","            self.restart()","","        if self.general_ctr == 2880:","            print ('RAN FOR 12 HRS! RESTART TRIGGERING')","            logging.info('RAN FOR 12 HRS! RESTART TRIGGERING')","            self.general_ctr = 0","            self.restart()","","        self.cur_len = len(ord_list)","        if (self.cur_len == self.prev_len) and (self.cur_len > 0): # could incur errors","            self.idle += 1","        elif (self.cur_len < self.prev_len):","            self.streak += 1","            self.idle = 0 #wont use idle for now","        else:","            self.idle = 0","","        logging.info('Subminute -- Mid price {}; Position Size: {}; OrderList: {}; OrderLength: {}'.format(ticker['mid'], pos, ord_list, len(ord_list)))","","        if self.act_volatility != None: #abrupt change in volatility","            cond1 = self.cur_volatility > self.act_volatility*1.25","            cond2 = self.cur_volatility < self.act_volatility*.75","        else:","            cond1 = cond2 = False","","        cond3 = (self.cur_volatility != None) and (self.first) # no order placed before + enough data to calc volatility","        cond4 = (ord_list != None) and (ord_list != []) and (len(ord_list) < 2) and (self.cur_len < self.prev_len) # 1 order just filled --> left 1 order on the other side","        #cond5 = (self.idle == 60) # if orders don't get filled for too long","        cond5 = False","        cond6 = (ord_list == [] and self.first == False) # no orders after the first trade","        cond7 = (ord_list != None) and (ord_list != []) and (len(ord_list) < 2) and (ord_list[0]['side'] == 'Buy') and (pos != 0) and (pos > 0) # 1 order left + on the same side of the pos","        cond8 = (ord_list != None) and (ord_list != []) and (len(ord_list) < 2) and (ord_list[0]['side'] == 'Sell') and (pos != 0) and (pos < 0) # 1 order left + on the same side of the pos","        cond9 = (len(ord_list) >= 10)","","        if self.streak == 3:","            logging.info('Sleep to prevent successive market orders.')","            cond4 = False","            self.sleep_ctr += 1","","        logging.info('assess conditions: {}, {}, {}, {}, {}, {}, {}, {}, {}'.format(cond1, cond2, cond3, cond4, cond5, cond6, cond7, cond8, cond9))","        if cond1 or cond2 or cond3 or cond4 or cond5 or cond6 or cond7 or cond8 or cond9:","            if cond3:","                logging.info('First Trade!')","                self.first = False","            if cond4 or cond1 or cond2 or cond7 or cond8 or cond9:","                logging.info('Revise')","                self.client.Order.Order_cancelAll().result()","            if cond5:","                logging.info('Idle')","                self.idle = 0","            r, spread = self.calc_res_price(ticker[\"mid\"], pos, self.cur_volatility)","            print ('Real mid: ', r)","            print ('Spread: ', spread)","            buy_qty, sell_qty = self.get_qty(pos)","            self.post_orders(spread, r, buy_qty, sell_qty, pos)","            self.act_volatility = self.cur_volatility","            self.cur_len += bool(buy_qty) + bool(sell_qty)","            logging.info('Orders post: {}, {}, {}, {}'.format(r, spread, buy_qty, sell_qty))","        else:","            pass","","        self.prev_len = self.cur_len","        ","","        \"\"\"","        if self.write:","            self.df.to_csv()","        \"\"\"","","","        # if self.ws.api_key:","        #     self.logger.info(\"Funds: %s\" % self.ws.funds())","        #logger.info(\"Market Depth: %s\" % self.ws.market_depth())","        #logger.info(\"Recent Trades: %s\\n\\n\" % self.ws.recent_trades())","","    def collect(self):","        threading.Timer(10.0, self.collect).start()","        self.ctr += 1","        ticker = self.ws.get_ticker()['mid']","        self.tick.append(ticker)","        print ('ticker collected: ', ticker)","        if self.ctr == 360:","            df = pd.DataFrame({'tick': ticker})","            df.to_csv('collected.csv')","            print ('Done!')","","    def clean(self):","        print (\"CANCEL ALL ORDERS\")","        logging.info('CANCEL ALL ORDERS')","        #self.clean = True","        return self.client.Order.Order_cancelAll().result()","","    def calc_res_price(self, mid, qty, vola):","        #print (qty)","        VAR = vola","        r = mid - (qty*GAMMA*VAR*D)/MAX_POS","        spread = max(0.1, GAMMA*VAR*D + np.log(1+GAMMA/K))","        return r, spread","","    def post_orders(self, spread, mid, buy_qty, sell_qty, pos):","        getcontext().prec = 4","        if pos > 0:","            buy = {'orderQty': buy_qty, 'price': self.round_to_05(float(Decimal(mid) - Decimal(spread)/Decimal(2))), 'side': 'Buy', 'symbol' : self.symbol, 'execInst': 'ParticipateDoNotInitiate'}","            sell = {'orderQty': sell_qty, 'price': self.round_to_05(float(Decimal(mid) + Decimal(spread)/Decimal(2))), 'side': 'Sell', 'symbol' : self.symbol}","        elif pos < 0:","            buy = {'orderQty': buy_qty, 'price': self.round_to_05(float(Decimal(mid) - Decimal(spread)/Decimal(2))), 'side': 'Buy', 'symbol' : self.symbol}","            sell = {'orderQty': sell_qty, 'price': self.round_to_05(float(Decimal(mid) + Decimal(spread)/Decimal(2))), 'side': 'Sell', 'symbol' : self.symbol, 'execInst': 'ParticipateDoNotInitiate'}","        else:","            buy = {'orderQty': buy_qty, 'price': self.round_to_05(float(Decimal(mid) - Decimal(spread)/Decimal(2))), 'side': 'Buy', 'symbol' : self.symbol, 'execInst': 'ParticipateDoNotInitiate'}","            sell = {'orderQty': sell_qty, 'price': self.round_to_05(float(Decimal(mid) + Decimal(spread)/Decimal(2))), 'side': 'Sell', 'symbol' : self.symbol, 'execInst': 'ParticipateDoNotInitiate'}","        if buy_qty == 0:","            to_create = [sell]","        elif sell_qty == 0:","            to_create = [buy]","        else:","            to_create = [buy, sell]","        print ('Buy: {}; Sell: {}'.format(buy['price'], sell['price']))","        logging.info('Buy: {}; Sell: {}'.format(buy['price'], sell['price']))","        self.client.Order.Order_newBulk(orders=json.dumps(to_create)).result()","","    def get_qty(self, qty):","        buy_qty = THETA*np.exp(-ETA2*qty) if qty < 0 else THETA*np.exp(-ETA*qty)","        sell_qty = THETA*np.exp(ETA2*qty) if qty > 0 else THETA*np.exp(ETA*qty)","        return int(round(buy_qty)), int(round(sell_qty))","","    def setup_logger(self):","        # Prints logger info to terminal","        logger = logging.getLogger()","        logger.setLevel(logging.INFO)  # Change this to DEBUG if you want a lot more info","        ch = logging.StreamHandler()","        # create formatter","        formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")","        # add formatter to ch","        ch.setFormatter(formatter)","        logger.addHandler(ch)","        return logger","","    def check_connection(self):","        \"\"\"Ensure the WS connections are still open.\"\"\"","        print ('STATUS: ', not self.ws.exited)","       \tlogging.info('STATUS: ', not self.ws.exited)","        return not self.ws.exited","","    def run_loop(self):","        while True:","            sys.stdout.write(\"-----\\n\")","            sys.stdout.flush()","            # TODO 1: write check_file_change & add settings.","","            #self.check_file_change()","            #sleep(settings.LOOP_INTERVAL)","","            # This will restart on very short downtime, but if it's longer,","            # the MM will crash entirely as it is unable to connect to the WS on boot.","            if not self.check_connection():","                print ('No connection detected! Restarting...')","                logging.error(\"Realtime data connection unexpectedly closed, restarting.\")","                self.restart()","","            # TODO 2: sanity_check, print_status","","            self.run()","","            #self.sanity_check()  # Ensures health of mm - several cut-out points here","            #self.print_status()  # Print skew, delta, etc","            #self.place_orders()  # Creates desired orders and converges to existing orders","","","if __name__ == \"__main__\":","    current_hour = datetime.datetime.now().hour","    os.environ['TZ'] = 'Asia/Tokyo'","    time.tzset() # only available in Unix","    Market_maker('XBTUSD').run() # Market_maker('ETHUSD').run()"],"id":10}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["c"],"id":11},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["l"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["a"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["s"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["s"]}],[{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":[" "],"id":12}],[{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":["m"],"id":13},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["a"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["i"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["n"]}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":[":"],"id":14}],[{"start":{"row":0,"column":11},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":15},{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":["d"],"id":16},{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":["e"]}],[{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"remove","lines":["e"],"id":17},{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"remove","lines":["d"]}],[{"start":{"row":1,"column":4},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":18},{"start":{"row":2,"column":0},"end":{"row":2,"column":4},"action":"insert","lines":["    "]},{"start":{"row":2,"column":4},"end":{"row":3,"column":0},"action":"insert","lines":["",""]},{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"remove","lines":["    "],"id":19},{"start":{"row":2,"column":4},"end":{"row":3,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":2,"column":4},"action":"remove","lines":["    "]},{"start":{"row":1,"column":4},"end":{"row":2,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":["d"],"id":20},{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":["e"]},{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"insert","lines":["f"]}],[{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"insert","lines":[" "],"id":21},{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["_"]},{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"insert","lines":["_"]},{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":["i"]},{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":["n"]},{"start":{"row":1,"column":12},"end":{"row":1,"column":13},"action":"insert","lines":["i"]}],[{"start":{"row":1,"column":8},"end":{"row":1,"column":13},"action":"remove","lines":["__ini"],"id":22},{"start":{"row":1,"column":8},"end":{"row":1,"column":18},"action":"insert","lines":["__init__()"]}],[{"start":{"row":1,"column":18},"end":{"row":1,"column":19},"action":"insert","lines":[":"],"id":23}],[{"start":{"row":1,"column":19},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":24},{"start":{"row":2,"column":0},"end":{"row":2,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":2,"column":8},"end":{"row":3,"column":0},"action":"insert","lines":["        self.dry_run = dry_run",""],"id":25}],[{"start":{"row":2,"column":12},"end":{"row":2,"column":16},"action":"remove","lines":["    "],"id":26},{"start":{"row":2,"column":8},"end":{"row":2,"column":12},"action":"remove","lines":["    "]}],[{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["i"],"id":27},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["f"]}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":[" "],"id":28}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":29},{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":5,"column":0},"end":{"row":17,"column":0},"action":"insert","lines":["class ExchangeInterface:","    def __init__(self, dry_run=False):","        self.dry_run = dry_run","        if len(sys.argv) > 1:","            self.symbol = sys.argv[1]","        else:","            self.symbol = settings.SYMBOL","        self.bitmex = bitmex.BitMEX(base_url=settings.BASE_URL, symbol=self.symbol,","                                    apiKey=settings.API_KEY, apiSecret=settings.API_SECRET,","                                    orderIDPrefix=settings.ORDERID_PREFIX, postOnly=settings.POST_ONLY,","                                    timeout=settings.TIMEOUT)","",""],"id":30}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"remove","lines":["class ExchangeInterface:",""],"id":31}],[{"start":{"row":1,"column":17},"end":{"row":1,"column":18},"action":"insert","lines":["s"],"id":32},{"start":{"row":1,"column":18},"end":{"row":1,"column":19},"action":"insert","lines":["e"]},{"start":{"row":1,"column":19},"end":{"row":1,"column":20},"action":"insert","lines":["l"]},{"start":{"row":1,"column":20},"end":{"row":1,"column":21},"action":"insert","lines":["f"]},{"start":{"row":1,"column":21},"end":{"row":1,"column":22},"action":"insert","lines":[","]}],[{"start":{"row":1,"column":22},"end":{"row":1,"column":23},"action":"insert","lines":["d"],"id":33},{"start":{"row":1,"column":23},"end":{"row":1,"column":24},"action":"insert","lines":["r"]},{"start":{"row":1,"column":24},"end":{"row":1,"column":25},"action":"insert","lines":["y"]},{"start":{"row":1,"column":25},"end":{"row":1,"column":26},"action":"insert","lines":["_"]}],[{"start":{"row":1,"column":22},"end":{"row":1,"column":26},"action":"remove","lines":["dry_"],"id":34},{"start":{"row":1,"column":22},"end":{"row":1,"column":29},"action":"insert","lines":["dry_run"]}],[{"start":{"row":1,"column":29},"end":{"row":1,"column":30},"action":"insert","lines":["="],"id":35},{"start":{"row":1,"column":30},"end":{"row":1,"column":31},"action":"insert","lines":["f"]},{"start":{"row":1,"column":31},"end":{"row":1,"column":32},"action":"insert","lines":["a"]},{"start":{"row":1,"column":32},"end":{"row":1,"column":33},"action":"insert","lines":["l"]}],[{"start":{"row":1,"column":33},"end":{"row":1,"column":34},"action":"insert","lines":["s"],"id":36},{"start":{"row":1,"column":34},"end":{"row":1,"column":35},"action":"insert","lines":["e"]}],[{"start":{"row":1,"column":30},"end":{"row":1,"column":31},"action":"remove","lines":["f"],"id":37}],[{"start":{"row":1,"column":30},"end":{"row":1,"column":31},"action":"insert","lines":["F"],"id":38}],[{"start":{"row":1,"column":30},"end":{"row":1,"column":35},"action":"remove","lines":["False"],"id":39},{"start":{"row":1,"column":30},"end":{"row":1,"column":35},"action":"insert","lines":["False"]}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"remove","lines":[" "],"id":40},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"remove","lines":["f"]},{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"remove","lines":["i"]}],[{"start":{"row":5,"column":0},"end":{"row":10,"column":0},"action":"remove","lines":["    def __init__(self, dry_run=False):","        self.dry_run = dry_run","        if len(sys.argv) > 1:","            self.symbol = sys.argv[1]","        else:",""],"id":41}],[{"start":{"row":5,"column":8},"end":{"row":5,"column":12},"action":"remove","lines":["    "],"id":42}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["",""],"id":43},{"start":{"row":2,"column":30},"end":{"row":3,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":44},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":33},"action":"insert","lines":["from market_maker import settings"],"id":45}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["from market_maker import settings",""],"id":46}],[{"start":{"row":1,"column":32},"end":{"row":1,"column":33},"action":"remove","lines":["s"],"id":47},{"start":{"row":1,"column":31},"end":{"row":1,"column":32},"action":"remove","lines":["g"]},{"start":{"row":1,"column":30},"end":{"row":1,"column":31},"action":"remove","lines":["n"]},{"start":{"row":1,"column":29},"end":{"row":1,"column":30},"action":"remove","lines":["i"]},{"start":{"row":1,"column":28},"end":{"row":1,"column":29},"action":"remove","lines":["t"]},{"start":{"row":1,"column":27},"end":{"row":1,"column":28},"action":"remove","lines":["t"]},{"start":{"row":1,"column":26},"end":{"row":1,"column":27},"action":"remove","lines":["e"]},{"start":{"row":1,"column":25},"end":{"row":1,"column":26},"action":"remove","lines":["s"]}],[{"start":{"row":1,"column":25},"end":{"row":1,"column":26},"action":"insert","lines":["b"],"id":48},{"start":{"row":1,"column":26},"end":{"row":1,"column":27},"action":"insert","lines":["i"]},{"start":{"row":1,"column":27},"end":{"row":1,"column":28},"action":"insert","lines":["t"]},{"start":{"row":1,"column":28},"end":{"row":1,"column":29},"action":"insert","lines":["m"]},{"start":{"row":1,"column":29},"end":{"row":1,"column":30},"action":"insert","lines":["e"]},{"start":{"row":1,"column":30},"end":{"row":1,"column":31},"action":"insert","lines":["x"]}],[{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":49}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"insert","lines":["    "],"id":50}],[{"start":{"row":12,"column":4},"end":{"row":12,"column":5},"action":"insert","lines":["d"],"id":51},{"start":{"row":12,"column":5},"end":{"row":12,"column":6},"action":"insert","lines":["e"]},{"start":{"row":12,"column":6},"end":{"row":12,"column":7},"action":"insert","lines":["f"]}],[{"start":{"row":12,"column":7},"end":{"row":12,"column":8},"action":"insert","lines":[" "],"id":52},{"start":{"row":12,"column":8},"end":{"row":12,"column":9},"action":"insert","lines":["r"]},{"start":{"row":12,"column":9},"end":{"row":12,"column":10},"action":"insert","lines":["u"]},{"start":{"row":12,"column":10},"end":{"row":12,"column":11},"action":"insert","lines":["n"]}],[{"start":{"row":12,"column":8},"end":{"row":12,"column":11},"action":"remove","lines":["run"],"id":53},{"start":{"row":12,"column":8},"end":{"row":12,"column":13},"action":"insert","lines":["run()"]}],[{"start":{"row":12,"column":12},"end":{"row":12,"column":13},"action":"insert","lines":["s"],"id":54},{"start":{"row":12,"column":13},"end":{"row":12,"column":14},"action":"insert","lines":["e"]},{"start":{"row":12,"column":14},"end":{"row":12,"column":15},"action":"insert","lines":["l"]},{"start":{"row":12,"column":15},"end":{"row":12,"column":16},"action":"insert","lines":["f"]},{"start":{"row":12,"column":16},"end":{"row":12,"column":17},"action":"insert","lines":[":"]}],[{"start":{"row":12,"column":17},"end":{"row":13,"column":0},"action":"insert","lines":["",""],"id":55},{"start":{"row":13,"column":0},"end":{"row":13,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":13,"column":4},"end":{"row":13,"column":8},"action":"remove","lines":["    "],"id":56},{"start":{"row":13,"column":0},"end":{"row":13,"column":4},"action":"remove","lines":["    "]},{"start":{"row":12,"column":17},"end":{"row":13,"column":0},"action":"remove","lines":["",""]},{"start":{"row":12,"column":16},"end":{"row":12,"column":17},"action":"remove","lines":[":"]}],[{"start":{"row":12,"column":17},"end":{"row":12,"column":18},"action":"insert","lines":[":"],"id":57}],[{"start":{"row":12,"column":18},"end":{"row":13,"column":0},"action":"insert","lines":["",""],"id":58},{"start":{"row":13,"column":0},"end":{"row":13,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":59}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["import threading",""],"id":60}],[{"start":{"row":14,"column":18},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":61},{"start":{"row":15,"column":0},"end":{"row":15,"column":8},"action":"insert","lines":["        "]},{"start":{"row":15,"column":8},"end":{"row":15,"column":9},"action":"insert","lines":["t"]},{"start":{"row":15,"column":9},"end":{"row":15,"column":10},"action":"insert","lines":["h"]},{"start":{"row":15,"column":10},"end":{"row":15,"column":11},"action":"insert","lines":["e"]},{"start":{"row":15,"column":11},"end":{"row":15,"column":12},"action":"insert","lines":["r"]}],[{"start":{"row":15,"column":12},"end":{"row":15,"column":13},"action":"insert","lines":["a"],"id":62}],[{"start":{"row":15,"column":12},"end":{"row":15,"column":13},"action":"remove","lines":["a"],"id":63},{"start":{"row":15,"column":11},"end":{"row":15,"column":12},"action":"remove","lines":["r"]},{"start":{"row":15,"column":10},"end":{"row":15,"column":11},"action":"remove","lines":["e"]}],[{"start":{"row":15,"column":8},"end":{"row":15,"column":10},"action":"remove","lines":["th"],"id":64},{"start":{"row":15,"column":8},"end":{"row":15,"column":17},"action":"insert","lines":["threading"]}],[{"start":{"row":15,"column":17},"end":{"row":15,"column":18},"action":"insert","lines":["."],"id":65}],[{"start":{"row":15,"column":17},"end":{"row":15,"column":18},"action":"remove","lines":["."],"id":66}],[{"start":{"row":15,"column":16},"end":{"row":15,"column":17},"action":"remove","lines":["g"],"id":67},{"start":{"row":15,"column":15},"end":{"row":15,"column":16},"action":"remove","lines":["n"]},{"start":{"row":15,"column":14},"end":{"row":15,"column":15},"action":"remove","lines":["i"]},{"start":{"row":15,"column":13},"end":{"row":15,"column":14},"action":"remove","lines":["d"]},{"start":{"row":15,"column":12},"end":{"row":15,"column":13},"action":"remove","lines":["a"]},{"start":{"row":15,"column":11},"end":{"row":15,"column":12},"action":"remove","lines":["e"]},{"start":{"row":15,"column":10},"end":{"row":15,"column":11},"action":"remove","lines":["r"]},{"start":{"row":15,"column":9},"end":{"row":15,"column":10},"action":"remove","lines":["h"]},{"start":{"row":15,"column":8},"end":{"row":15,"column":9},"action":"remove","lines":["t"]}],[{"start":{"row":15,"column":8},"end":{"row":15,"column":9},"action":"insert","lines":["p"],"id":68},{"start":{"row":15,"column":9},"end":{"row":15,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":15,"column":9},"end":{"row":15,"column":10},"action":"remove","lines":["t"],"id":69}],[{"start":{"row":15,"column":9},"end":{"row":15,"column":10},"action":"insert","lines":["r"],"id":70},{"start":{"row":15,"column":10},"end":{"row":15,"column":11},"action":"insert","lines":["i"]},{"start":{"row":15,"column":11},"end":{"row":15,"column":12},"action":"insert","lines":["n"]},{"start":{"row":15,"column":12},"end":{"row":15,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":15,"column":13},"end":{"row":15,"column":15},"action":"insert","lines":["()"],"id":71}],[{"start":{"row":15,"column":14},"end":{"row":15,"column":16},"action":"insert","lines":["\"\""],"id":72}],[{"start":{"row":15,"column":15},"end":{"row":15,"column":16},"action":"insert","lines":["r"],"id":73},{"start":{"row":15,"column":16},"end":{"row":15,"column":17},"action":"insert","lines":["u"]},{"start":{"row":15,"column":17},"end":{"row":15,"column":18},"action":"insert","lines":["n"]}],[{"start":{"row":15,"column":20},"end":{"row":16,"column":0},"action":"insert","lines":["",""],"id":74},{"start":{"row":16,"column":0},"end":{"row":16,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":16,"column":4},"end":{"row":16,"column":8},"action":"remove","lines":["    "],"id":75},{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":16,"column":0},"end":{"row":17,"column":0},"action":"insert","lines":["",""],"id":76}],[{"start":{"row":17,"column":0},"end":{"row":19,"column":20},"action":"insert","lines":["if __name__ == \"__main__\":","    my_execute = Execute()","    my_execute.run()"],"id":77}],[{"start":{"row":18,"column":13},"end":{"row":18,"column":14},"action":"remove","lines":["e"],"id":78},{"start":{"row":18,"column":12},"end":{"row":18,"column":13},"action":"remove","lines":["t"]},{"start":{"row":18,"column":11},"end":{"row":18,"column":12},"action":"remove","lines":["u"]},{"start":{"row":18,"column":10},"end":{"row":18,"column":11},"action":"remove","lines":["c"]},{"start":{"row":18,"column":9},"end":{"row":18,"column":10},"action":"remove","lines":["e"]},{"start":{"row":18,"column":8},"end":{"row":18,"column":9},"action":"remove","lines":["x"]},{"start":{"row":18,"column":7},"end":{"row":18,"column":8},"action":"remove","lines":["e"]}],[{"start":{"row":18,"column":7},"end":{"row":18,"column":8},"action":"insert","lines":["m"],"id":79},{"start":{"row":18,"column":8},"end":{"row":18,"column":9},"action":"insert","lines":["a"]},{"start":{"row":18,"column":9},"end":{"row":18,"column":10},"action":"insert","lines":["i"]},{"start":{"row":18,"column":10},"end":{"row":18,"column":11},"action":"insert","lines":["n"]}],[{"start":{"row":18,"column":20},"end":{"row":18,"column":21},"action":"remove","lines":["e"],"id":80},{"start":{"row":18,"column":19},"end":{"row":18,"column":20},"action":"remove","lines":["t"]},{"start":{"row":18,"column":18},"end":{"row":18,"column":19},"action":"remove","lines":["u"]},{"start":{"row":18,"column":17},"end":{"row":18,"column":18},"action":"remove","lines":["c"]},{"start":{"row":18,"column":16},"end":{"row":18,"column":17},"action":"remove","lines":["e"]},{"start":{"row":18,"column":15},"end":{"row":18,"column":16},"action":"remove","lines":["x"]},{"start":{"row":18,"column":14},"end":{"row":18,"column":15},"action":"remove","lines":["E"]}],[{"start":{"row":18,"column":14},"end":{"row":18,"column":15},"action":"insert","lines":["m"],"id":81},{"start":{"row":18,"column":15},"end":{"row":18,"column":16},"action":"insert","lines":["a"]},{"start":{"row":18,"column":16},"end":{"row":18,"column":17},"action":"insert","lines":["i"]},{"start":{"row":18,"column":17},"end":{"row":18,"column":18},"action":"insert","lines":["n"]}],[{"start":{"row":19,"column":13},"end":{"row":19,"column":14},"action":"remove","lines":["e"],"id":82},{"start":{"row":19,"column":12},"end":{"row":19,"column":13},"action":"remove","lines":["t"]},{"start":{"row":19,"column":11},"end":{"row":19,"column":12},"action":"remove","lines":["u"]},{"start":{"row":19,"column":10},"end":{"row":19,"column":11},"action":"remove","lines":["c"]},{"start":{"row":19,"column":9},"end":{"row":19,"column":10},"action":"remove","lines":["e"]},{"start":{"row":19,"column":8},"end":{"row":19,"column":9},"action":"remove","lines":["x"]},{"start":{"row":19,"column":7},"end":{"row":19,"column":8},"action":"remove","lines":["e"]},{"start":{"row":19,"column":6},"end":{"row":19,"column":7},"action":"remove","lines":["_"]},{"start":{"row":19,"column":5},"end":{"row":19,"column":6},"action":"remove","lines":["y"]},{"start":{"row":19,"column":4},"end":{"row":19,"column":5},"action":"remove","lines":["m"]}],[{"start":{"row":19,"column":4},"end":{"row":19,"column":5},"action":"insert","lines":["m"],"id":83},{"start":{"row":19,"column":5},"end":{"row":19,"column":6},"action":"insert","lines":["a"]},{"start":{"row":19,"column":6},"end":{"row":19,"column":7},"action":"insert","lines":["i"]},{"start":{"row":19,"column":7},"end":{"row":19,"column":8},"action":"insert","lines":["n"]}],[{"start":{"row":17,"column":0},"end":{"row":21,"column":0},"action":"remove","lines":["if __name__ == \"__main__\":","    my_main = main()","    main.run()","        ",""],"id":84}],[{"start":{"row":12,"column":61},"end":{"row":13,"column":0},"action":"insert","lines":["",""],"id":85},{"start":{"row":13,"column":0},"end":{"row":13,"column":36},"action":"insert","lines":["                                    "]}],[{"start":{"row":13,"column":32},"end":{"row":13,"column":36},"action":"remove","lines":["    "],"id":86},{"start":{"row":13,"column":28},"end":{"row":13,"column":32},"action":"remove","lines":["    "]},{"start":{"row":13,"column":24},"end":{"row":13,"column":28},"action":"remove","lines":["    "]},{"start":{"row":13,"column":20},"end":{"row":13,"column":24},"action":"remove","lines":["    "]},{"start":{"row":13,"column":16},"end":{"row":13,"column":20},"action":"remove","lines":["    "]},{"start":{"row":13,"column":12},"end":{"row":13,"column":16},"action":"remove","lines":["    "]},{"start":{"row":13,"column":8},"end":{"row":13,"column":12},"action":"remove","lines":["    "]}],[{"start":{"row":13,"column":8},"end":{"row":13,"column":9},"action":"insert","lines":["s"],"id":87},{"start":{"row":13,"column":9},"end":{"row":13,"column":10},"action":"insert","lines":["e"]},{"start":{"row":13,"column":10},"end":{"row":13,"column":11},"action":"insert","lines":["l"]},{"start":{"row":13,"column":11},"end":{"row":13,"column":12},"action":"insert","lines":["f"]},{"start":{"row":13,"column":12},"end":{"row":13,"column":13},"action":"insert","lines":["."]},{"start":{"row":13,"column":13},"end":{"row":13,"column":14},"action":"insert","lines":["r"]},{"start":{"row":13,"column":14},"end":{"row":13,"column":15},"action":"insert","lines":["u"]},{"start":{"row":13,"column":15},"end":{"row":13,"column":16},"action":"insert","lines":["n"]}],[{"start":{"row":13,"column":13},"end":{"row":13,"column":16},"action":"remove","lines":["run"],"id":88},{"start":{"row":13,"column":13},"end":{"row":13,"column":18},"action":"insert","lines":["run()"]}],[{"start":{"row":5,"column":6},"end":{"row":5,"column":7},"action":"remove","lines":["m"],"id":89}],[{"start":{"row":5,"column":6},"end":{"row":5,"column":7},"action":"insert","lines":["M"],"id":90}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":5,"column":7},"end":{"row":5,"column":7},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1586588781129,"hash":"b807fdd0829f85ea412da3c8310a9bea84ebc013"}