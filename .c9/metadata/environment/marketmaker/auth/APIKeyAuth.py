{"filter":false,"title":"APIKeyAuth.py","tooltip":"/marketmaker/auth/APIKeyAuth.py","undoManager":{"mark":17,"position":17,"stack":[[{"start":{"row":0,"column":0},"end":{"row":61,"column":20},"action":"insert","lines":["from requests.auth import AuthBase","import time","import hashlib","import hmac","from future.builtins import bytes","from future.standard_library import hooks","with hooks():  # Python 2/3 compat","    from urllib.parse import urlparse","","","class APIKeyAuth(AuthBase):","","    \"\"\"Attaches API Key Authentication to the given Request object.\"\"\"","","    def __init__(self, apiKey, apiSecret):","        \"\"\"Init with Key & Secret.\"\"\"","        self.apiKey = apiKey","        self.apiSecret = apiSecret","","    def __call__(self, r):","        \"\"\"Called when forming a request - generates api key headers.\"\"\"","        # modify and return the request","        nonce = generate_expires()","        r.headers['api-expires'] = str(nonce)","        r.headers['api-key'] = self.apiKey","        r.headers['api-signature'] = generate_signature(self.apiSecret, r.method, r.url, nonce, r.body or '')","","        return r","","","def generate_expires():","    return int(time.time() + 3600)","","","# Generates an API signature.","# A signature is HMAC_SHA256(secret, verb + path + nonce + data), hex encoded.","# Verb must be uppercased, url is relative, nonce must be an increasing 64-bit integer","# and the data, if present, must be JSON without whitespace between keys.","#","# For example, in psuedocode (and in real code below):","#","# verb=POST","# url=/api/v1/order","# nonce=1416993995705","# data={\"symbol\":\"XBTZ14\",\"quantity\":1,\"price\":395.01}","# signature = HEX(HMAC_SHA256(secret, 'POST/api/v1/order1416993995705{\"symbol\":\"XBTZ14\",\"quantity\":1,\"price\":395.01}'))","def generate_signature(secret, verb, url, nonce, data):","    \"\"\"Generate a request signature compatible with BitMEX.\"\"\"","    # Parse the url so we can remove the base and extract just the path.","    parsedURL = urlparse(url)","    path = parsedURL.path","    if parsedURL.query:","        path = path + '?' + parsedURL.query","","    if isinstance(data, (bytes, bytearray)):","        data = data.decode('utf8')","","    # print \"Computing HMAC: %s\" % verb + path + str(nonce) + data","    message = verb + path + str(nonce) + data","","    signature = hmac.new(bytes(secret, 'utf8'), bytes(message, 'utf8'), digestmod=hashlib.sha256).hexdigest()","    return signature"],"id":1}],[{"start":{"row":7,"column":37},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":8,"column":0},"end":{"row":8,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":4},"action":"remove","lines":["    "],"id":3}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":1},"action":"insert","lines":["i"],"id":4},{"start":{"row":8,"column":1},"end":{"row":8,"column":2},"action":"insert","lines":["m"]},{"start":{"row":8,"column":2},"end":{"row":8,"column":3},"action":"insert","lines":["p"]},{"start":{"row":8,"column":3},"end":{"row":8,"column":4},"action":"insert","lines":["o"]},{"start":{"row":8,"column":4},"end":{"row":8,"column":5},"action":"insert","lines":["r"]},{"start":{"row":8,"column":5},"end":{"row":8,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":8,"column":6},"end":{"row":8,"column":7},"action":"insert","lines":[" "],"id":5},{"start":{"row":8,"column":7},"end":{"row":8,"column":8},"action":"insert","lines":["p"]},{"start":{"row":8,"column":8},"end":{"row":8,"column":9},"action":"insert","lines":["d"]},{"start":{"row":8,"column":9},"end":{"row":8,"column":10},"action":"insert","lines":["b"]}],[{"start":{"row":8,"column":10},"end":{"row":8,"column":11},"action":"insert","lines":[" "],"id":6},{"start":{"row":8,"column":11},"end":{"row":8,"column":12},"action":"insert","lines":["#"]}],[{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"insert","lines":[" "],"id":7}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":13},"action":"remove","lines":["import pdb # "],"id":8},{"start":{"row":8,"column":0},"end":{"row":8,"column":27},"action":"insert","lines":["import pdb; pdb.set_trace()"]}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":1},"action":"insert","lines":["#"],"id":9}],[{"start":{"row":8,"column":1},"end":{"row":8,"column":2},"action":"insert","lines":[" "],"id":10}],[{"start":{"row":30,"column":0},"end":{"row":31,"column":0},"action":"remove","lines":["",""],"id":12}],[{"start":{"row":33,"column":0},"end":{"row":34,"column":0},"action":"remove","lines":["",""],"id":13}],[{"start":{"row":45,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["",""],"id":14}],[{"start":{"row":7,"column":37},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":15},{"start":{"row":8,"column":0},"end":{"row":8,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":4},"action":"remove","lines":["    "],"id":16}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":17}],[{"start":{"row":9,"column":0},"end":{"row":11,"column":53},"action":"insert","lines":["from market_maker.auth.AccessTokenAuth import *","from market_maker.auth.APIKeyAuth import *","from market_maker.auth.APIKeyAuthWithExpires import *"],"id":18}],[{"start":{"row":11,"column":53},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":19}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":12,"column":0},"end":{"row":12,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1586590438006,"hash":"ea0984d2f4cc28cb6ccc478e3d157eef63627b45"}